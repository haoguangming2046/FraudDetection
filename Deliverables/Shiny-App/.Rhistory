license()
contributors()
x <- c(3, 7, 12, 10, 4)
x
print(x)
class(x)
y <- c(2, 5)
plot(x)
q()
ls()
ls()
q()
library(data.table)
library(Matrix)
library(xgboost)
library(Metrics)
library(maps)
library(ggplot2)
library(viridis)
library(plotly)
library(data.table)
library(Matrix)
library(xgboost)
library(Metrics)
library(maps)
library(ggplot2)
library(viridis)
library(plotly)
install.packages(c("Metrics", "maps", "viridis")
)
library(data.table)
library(Matrix)
library(xgboost)
library(Metrics)
library(maps)
library(ggplot2)
library(viridis)
library(plotly)
# Chunk 1: setup
knitr::opts_chunk$set(fig.width = 9.475, fig.height = 5)
# Chunk 2
rm(list = ls())
library(data.table)
library(Matrix)
library(xgboost)
library(Metrics)
library(maps)
library(ggplot2)
library(viridis)
library(plotly)
train = fread("E:/Vikas_Agrawal/Education/Kaggle/Allstate Claims Severity/input/train.csv", showProgress = F)
test = fread("E:/Vikas_Agrawal/Education/Kaggle/Allstate Claims Severity/input/test.csv", showProgress = F)
train[, loss:=log(loss)]
test[, loss:=0]
train_ids <- train$id; test_ids <- test$id;
y_train <- train$loss
# Chunk 3
us_map <- map_data("state")
tmp <- data.frame(region=tolower(rownames(state.x77)), data.frame(state.x77), abb=state.abb, division=state.division, stringsAsFactors = F)
dc_state <- data.frame(region="district of columbia",
Population=712,
Income = 5299,
Illiteracy = 0.9,
Life.Exp= 70.22, # US Avg
Murder= 8.5,
HS.Grad=52.3,
Frost=101,
Area=61,
abb="DC", division="South Atlantic")
tmp <- rbind(tmp, dc_state);
tmp <-tmp[order(tmp$region),]; rownames(tmp) <- NULL
tmp$cat112 <- 1:nrow(tmp)
mapdata=merge(us_map, tmp, by='region')
# Chunk 4
train_test = rbindlist(list(train, test), use.names = T)
features = setdiff(names(train_test), c("id", "loss"))
LETTERS702 <- c(LETTERS, sapply(LETTERS, function(x) paste0(x, LETTERS)))
for (f in features) {
if (is.character(train_test[[f]]) ) {
levels <- intersect(LETTERS702, unique(train_test[[f]]))
train_test[[f]] <- as.integer(factor(train_test[[f]], levels=levels))
}
}
# Chunk 5
mapdata_p1=merge(mapdata,train_test[,.(count=.N), by=.(cat112)],by="cat112")
p1 <- ggplot(data=mapdata_p1, aes(x=long, y=lat, group=group))
p1 <- p1 + geom_polygon(colour="white", aes(fill=count)) + ggtitle("Number of observations by State")
p1 <- p1 +xlab("Longitude") + ylab("Latitude") +  scale_fill_viridis() + theme_bw()
ggplotly(p1)
# Chunk 6
tmp2 <- merge(tmp, train_test[,.(count=.N), by=.(cat112)],all.x=T, by=c("cat112"))
t2 <- ggplot(tmp2,aes(x=count, y=Population)) + geom_point(size=3,aes(color=division)) + scale_color_viridis(discrete = T) +geom_smooth(method = lm) + ggtitle("Observation count by state vs. Population")
ggplotly(t2)
# Chunk 7
train_test <- merge(train_test, tmp, all.x=T, by=c("cat112"))
x_train = train_test[train_test$id %in% train_ids,]
x_test = train_test[train_test$id %in% test_ids,]
mapdata_p2=merge(mapdata, x_train[,.(median_loss=median(exp(loss))),, by=.(cat112)],by="cat112")
p2 <- ggplot(data=mapdata_p2, aes(x=long, y=lat, group=group))
p2 <- p2 +xlab("Longitude") + ylab("Latitude") +  scale_fill_viridis() + theme_bw()
p2 <- p2 + geom_polygon(colour="white", aes(fill=median_loss)) + ggtitle("Median Loss by State")
ggplotly(p2)
plot_state_boxplots <- function(type){
if (type == "state")
p3 <- ggplot(x_train, aes(x=abb, y=loss, color=division))+geom_boxplot() +xlab("State")
else
p3 <- ggplot(x_train, aes(x=division, y=loss, color=division))+geom_boxplot() +xlab("Region")
p3 <- p3 + ylab("log(loss)") + scale_color_viridis(discrete = T) + theme_bw() +
theme(axis.text.x=element_text(angle = 90, hjust = 1))
ggplotly(p3)
}
# Chunk 8
plot_state_boxplots("state")
# Chunk 9
plot_state_boxplots("division")
# Chunk 10
x_train_p5 <- x_train[, .(median_cont7=median(cont7), Income=median(Income)), by=.(abb, division)]
p5 <- ggplot(x_train_p5, aes(x=Income, y=median_cont7))+geom_point(aes(color=division)) + geom_smooth(method=lm)
p5 <- p5 +xlab("Income") + ylab("cont7") +  scale_color_viridis(discrete = T) + theme_bw()
ggplotly(p5)
# Chunk 1: setup
knitr::opts_chunk$set(fig.width = 9.475, fig.height = 5)
# Chunk 2
rm(list = ls())
library(data.table)
library(Matrix)
library(xgboost)
library(Metrics)
library(maps)
library(ggplot2)
library(viridis)
library(plotly)
train = fread("E:/Vikas_Agrawal/Education/Kaggle/Allstate Claims Severity/input/train.csv", showProgress = F)
test = fread("E:/Vikas_Agrawal/Education/Kaggle/Allstate Claims Severity/input/test.csv", showProgress = F)
train[, loss:=log(loss)]
test[, loss:=0]
train_ids <- train$id; test_ids <- test$id;
y_train <- train$loss
# Chunk 3
us_map <- map_data("state")
tmp <- data.frame(region=tolower(rownames(state.x77)), data.frame(state.x77), abb=state.abb, division=state.division, stringsAsFactors = F)
dc_state <- data.frame(region="district of columbia",
Population=712,
Income = 5299,
Illiteracy = 0.9,
Life.Exp= 70.22, # US Avg
Murder= 8.5,
HS.Grad=52.3,
Frost=101,
Area=61,
abb="DC", division="South Atlantic")
tmp <- rbind(tmp, dc_state);
tmp <-tmp[order(tmp$region),]; rownames(tmp) <- NULL
tmp$cat112 <- 1:nrow(tmp)
mapdata=merge(us_map, tmp, by='region')
# Chunk 4
train_test = rbindlist(list(train, test), use.names = T)
features = setdiff(names(train_test), c("id", "loss"))
LETTERS702 <- c(LETTERS, sapply(LETTERS, function(x) paste0(x, LETTERS)))
for (f in features) {
if (is.character(train_test[[f]]) ) {
levels <- intersect(LETTERS702, unique(train_test[[f]]))
train_test[[f]] <- as.integer(factor(train_test[[f]], levels=levels))
}
}
# Chunk 5
mapdata_p1=merge(mapdata,train_test[,.(count=.N), by=.(cat112)],by="cat112")
p1 <- ggplot(data=mapdata_p1, aes(x=long, y=lat, group=group))
p1 <- p1 + geom_polygon(colour="white", aes(fill=count)) + ggtitle("Number of observations by State")
p1 <- p1 +xlab("Longitude") + ylab("Latitude") +  scale_fill_viridis() + theme_bw()
ggplotly(p1)
# Chunk 6
tmp2 <- merge(tmp, train_test[,.(count=.N), by=.(cat112)],all.x=T, by=c("cat112"))
t2 <- ggplot(tmp2,aes(x=count, y=Population)) + geom_point(size=3,aes(color=division)) + scale_color_viridis(discrete = T) +geom_smooth(method = lm) + ggtitle("Observation count by state vs. Population")
ggplotly(t2)
# Chunk 7
train_test <- merge(train_test, tmp, all.x=T, by=c("cat112"))
x_train = train_test[train_test$id %in% train_ids,]
x_test = train_test[train_test$id %in% test_ids,]
mapdata_p2=merge(mapdata, x_train[,.(median_loss=median(exp(loss))),, by=.(cat112)],by="cat112")
p2 <- ggplot(data=mapdata_p2, aes(x=long, y=lat, group=group))
p2 <- p2 +xlab("Longitude") + ylab("Latitude") +  scale_fill_viridis() + theme_bw()
p2 <- p2 + geom_polygon(colour="white", aes(fill=median_loss)) + ggtitle("Median Loss by State")
ggplotly(p2)
plot_state_boxplots <- function(type){
if (type == "state")
p3 <- ggplot(x_train, aes(x=abb, y=loss, color=division))+geom_boxplot() +xlab("State")
else
p3 <- ggplot(x_train, aes(x=division, y=loss, color=division))+geom_boxplot() +xlab("Region")
p3 <- p3 + ylab("log(loss)") + scale_color_viridis(discrete = T) + theme_bw() +
theme(axis.text.x=element_text(angle = 90, hjust = 1))
ggplotly(p3)
}
# Chunk 8
plot_state_boxplots("state")
# Chunk 9
plot_state_boxplots("division")
# Chunk 10
x_train_p5 <- x_train[, .(median_cont7=median(cont7), Income=median(Income)), by=.(abb, division)]
p5 <- ggplot(x_train_p5, aes(x=Income, y=median_cont7))+geom_point(aes(color=division)) + geom_smooth(method=lm)
p5 <- p5 +xlab("Income") + ylab("cont7") +  scale_color_viridis(discrete = T) + theme_bw()
ggplotly(p5)
---
View(train)
train
shiny::runApp('E:/Education/POC/Fraud Detection/Deliverable/Shiny-App')
runApp('E:/Education/POC/Fraud Detection/Deliverable/Shiny-App')
runApp('E:/Education/POC/Fraud Detection/Deliverable/Shiny-App')
setwd("'E:/Education/POC/Fraud Detection/Deliverable/Shiny-App'")
setwd("E:/Education/POC/Fraud Detection/Deliverable/Shiny-App")
library(data.table)
library(ggplot2)
library(xgboost)
library(Ckmeans.1d.dp)
library(shiny)
library(dplyr)
library(pROC)
load("data/Data.RData")
load("data/Output.RData")
importance_matrix <- importance_matrix[1:15, ]
source("xgb.importance.plot.R")
source("ggroc.R")
test_dt[, pred_prob:=modelPred]
test_dt[, pred_class:=ifelse(pred_prob > opt_cutoff, 1, 0)]
setorder(test_dt, -bad_loan, -pred_class)
outData <- test_dt[, list(id, int_rate, annual_inc, dti, loan_amnt, term, bad_loan, pred_prob, pred_class)]
outData[, pred_class:=as.integer(pred_class)]
outData[, annual_inc:=as.integer(annual_inc)]
outData[, term:=as.integer(term)]
outData[, pred_prob:=round(pred_prob, 3)]
confMat <- outData[, table(bad_loan, pred_class)]
confMat <- data.table(data.frame(confMat))
setnames(confMat, c("Bad Loan", "Predicted Class", "Frequency"))
setnames(outData, c("id", "int_rate", "annual_inc", "dti", "loan_amnt", "term", "bad_loan", "pred_prob",
"pred_class"), c("ID", "Interest Rate", "Annual Income", "Debt to Income Ratio", "Loan Amount",
"Tenure", "Bad Loan", "Predicted Probabilty", "Predicted Class"))
str(rawData, give.head=FALSE)
str(rawData, give.head=TRUE)
options("width")
str(rawData, width=109)
str(rawData, width=59)
str(rawData, width=39)
?xgb
runApp()
runApp()
